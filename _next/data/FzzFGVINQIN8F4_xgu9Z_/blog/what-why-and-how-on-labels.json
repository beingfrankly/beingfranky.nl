{"pageProps":{"frontmatter":{"type":"blog","title":"The what, why and how behind labels","published":true,"publishedOn":"2021-06-09","tags":["accessibility","labels"],"description":"As this is an introduction","keywords":["accessibility","labels","explicit","implicit","input"],"slug":"what-why-and-how-on-labels","id":"2021w23b1","updatedOn":"2021-10-21T10:29:17.036Z"},"code":"var Component=(()=>{var r=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var i=a=>s(a,\"__esModule\",{value:!0});var m=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),b=(a,e)=>{i(a);for(var t in e)s(a,t,{get:e[t],enumerable:!0})},k=(a,e,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of d(e))!u.call(a,l)&&l!==\"default\"&&s(a,l,{get:()=>e[l],enumerable:!(t=h(e,l))||t.enumerable});return a},N=a=>k(i(s(a!=null?r(p(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var o=m((x,c)=>{c.exports=_jsx_runtime});var v={};b(v,{default:()=>f,frontmatter:()=>w});var n=N(o()),w={type:\"blog\",title:\"The what, why and how behind labels\",published:!0,publishedOn:\"2021-06-09\",tags:[\"accessibility\",\"labels\"],description:\"As this is an introduction\",keywords:[\"accessibility\",\"labels\",\"explicit\",\"implicit\",\"input\"],slug:\"what-why-and-how-on-labels\",id:\"2021w23b1\",updatedOn:\"2021-10-21T10:29:17.036Z\"};function g(a={}){let e=Object.assign({h1:\"h1\",p:\"p\",h2:\"h2\",code:\"code\",ol:\"ol\",li:\"li\",strong:\"strong\",h3:\"h3\",div:\"div\",pre:\"pre\",span:\"span\",blockquote:\"blockquote\",em:\"em\",ul:\"ul\",a:\"a\"},a.components),{wrapper:t}=e,l=(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"The what, why and how on labels\"}),`\n`,(0,n.jsx)(e.p,{children:\"Today I want to take the chance to tell you about the importance of labels and what they have to offer us. So with this bite-sized post I\\u2019ll cover the following: what a label is, what a label does if you use them, how we can use/add labels and which other HTML elements should have a label.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"So, what's a label to begin with?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Well, the \",(0,n.jsx)(e.code,{children:\"<label>\"}),\" is a simple HTML element that holds a text value,[^1] which explains something about the related input element. And that's basically it for our humble label element. So how could such a simple HTML element have such an impact? Let's find out together.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Why should we use labels?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Why we need to use labels, is to understand what they\\u2019ll do for us when we use them. So, what do we gain when we use a label? Well, when we\\u2019ve paired a label to an input field it does two things:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Increases the \",(0,n.jsx)(e.strong,{children:\"interactive area\"}),\" of the associated input field. The browser does this for us when it sees a label paired with an input field. But what does it mean when the interactive area is increased? Well when the user clicks on the label it will instead focus on the associated input field. This improves the UX on mobile devices and for users with a physical disability (e.g. tremors).\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Screen readers are able to announce the name (the associated label) of an input field when it's focused. See the examples down below what the difference is with and without an associated label.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Without label\"}),`\n`,(0,n.jsx)(e.div,{className:\"remark-highlight\",children:(0,n.jsx)(e.pre,{className:\"language-html\",children:(0,n.jsxs)(e.code,{className:\"language-html\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"input\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"type\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"text\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"name\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"username\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:'This will say: \"edit text blank\" on MacBook Voice Over'}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"With label\"}),`\n`,(0,n.jsx)(e.div,{className:\"remark-highlight\",children:(0,n.jsx)(e.pre,{className:\"language-html\",children:(0,n.jsxs)(e.code,{className:\"language-html\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"label\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"for\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"username_input\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),\"Username:\",(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"</\"}),\"label\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"input\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"id\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"username_input\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"type\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"text\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"name\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"username\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:'This will say: \"Username, edit text\" on MacBook Voice Over'}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"How could we add a label?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"There are two approaches for adding a label. The first approach is called \",(0,n.jsx)(e.strong,{children:\"implicit\"}),\" and the second approach is called \",(0,n.jsx)(e.strong,{children:\"explicit\"}),\". We'll cover \",(0,n.jsx)(e.strong,{children:\"implicit\"}),\" first and then I'll continue with \",(0,n.jsx)(e.strong,{children:\"explicit\"}),\". And I\\u2019ll explain why the second approach is the recommended option.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Implicit\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"With the implicit method we use the label as a \",(0,n.jsx)(e.strong,{children:\"wrapper/container.\"}),\" It doesn\\u2019t require anything else from us. Just put the input field inside and you\\u2019re done. You\\u2019ve added the label and associated it \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.strong,{children:\"implicitly\"})}),\" with an input field.\"]}),`\n`,(0,n.jsx)(e.div,{className:\"remark-highlight\",children:(0,n.jsx)(e.pre,{className:\"language-html\",children:(0,n.jsxs)(e.code,{className:\"language-html\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"label\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),`\n\tEmail:\n\t`,(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"input\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"type\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"text\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"name\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"email\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"</\"}),\"label\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),`\n`]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s move on to the second approach.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Explicit (recommended)\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"With the explicit approach we don\\u2019t use the label as a wrapper/container. And we're not required to put it directly before the input field in the DOM* to make it work (which you\\u2019ll see in every example, even the one down below). So how could we tell HTML that the label we\\u2019re using is for specific input field? Through two special attributes: \",(0,n.jsx)(e.code,{children:\"for\"}),\" & \",(0,n.jsx)(e.code,{children:\"id\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{className:\"remark-highlight\",children:(0,n.jsx)(e.pre,{className:\"language-html\",children:(0,n.jsxs)(e.code,{className:\"language-html\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"label\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"for\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"email_input\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),\"Email:\",(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"</\"}),\"label\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"input\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"id\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"email_input\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"type\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"text\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"name\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"email\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The label element has a \",(0,n.jsx)(e.code,{children:\"for\"}),\" attribute that will have a certain value. The input element on their turn has an \",(0,n.jsx)(e.code,{children:\"id\"}),\" attribute which also holds a certain value. You may have guessed it, without peeking at the example above, that both attributes need to have the same value. By using the same value in the \",(0,n.jsx)(e.code,{children:\"for\"}),\" and the \",(0,n.jsx)(e.code,{children:\"id\"}),\" attribute you'll \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.strong,{children:\"explicitly\"})}),\" associate the label to an input field.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"So why is this the recommended approach? To put it simply, because of accessibility support.[^2] At the moment it's not possible to select an input by its name (the associated label) through voice command (e.g. Voice Control from Apple). I've tested this myself on a MacBook with Safari and Voice Control. And it just didn't work, no matter how many times I've tried. I'll add a link down below for the current support results\"}),`\n`,(0,n.jsx)(e.p,{children:`Now we know how to use and associate a label with an input. But are we limited to just an input or are there more potential friends for our label? There sure are and they're grouped together under \"labelable\" fields.`}),`\n`,(0,n.jsx)(e.h2,{children:\"Labelable, excuse me?\"}),`\n`,(0,n.jsx)(e.p,{children:\"As a non English speaker, that word is just a mouthful for me. Moving on. So this term groups a list of elements together that should be paired with a label.[^3] I won't go into it further details what each element does on its own.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Labelable fields:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"button\"}),`\n`,(0,n.jsx)(e.li,{children:\"inputs\"}),`\n`,(0,n.jsx)(e.li,{children:\"meter\"}),`\n`,(0,n.jsx)(e.li,{children:\"output\"}),`\n`,(0,n.jsx)(e.li,{children:\"progress\"}),`\n`,(0,n.jsx)(e.li,{children:\"select\"}),`\n`,(0,n.jsx)(e.li,{children:\"textarea\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The odd one in the list above is the \",(0,n.jsx)(e.code,{children:\"button\"}),\" element. Even though it's considered a labelable element it should \",(0,n.jsx)(e.strong,{children:\"not\"}),\" be paired with a label. This is because the button already comes with a label, which is the text value inside the tags.[^4] When using \",(0,n.jsx)(e.code,{children:'<input type=\"button\" value=\"Sign up\"/>'}),\" the label comes from it's \",(0,n.jsx)(e.code,{children:\"value\"}),\" attribute.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Credit goes to \",(0,n.jsx)(e.a,{href:\"https://dev.to/inhuofficial\",children:\"InHuOfficial\"}),\" for pointing out that I've missed this in the original post.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"When labels are used screen readers are able to do their work and assist their users\"}),`\n`,(0,n.jsx)(e.li,{children:\"Labels increase the interactive area for input fields which improves the user experience\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Using labels \",(0,n.jsx)(e.em,{children:\"explicitly\"}),\" is the recommended option when pairing up with a labelable element\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Labels used implicitly lack support for voice commands\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"In the next bite-sized blog we\\u2019re going to learn what to do when we can\\u2019t show a label visually. For whatever reason that might be.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"References\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"[^1]: \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\",children:\"Read more - MDN Label documentation\"}),`\n[^2]: `,(0,n.jsxs)(e.a,{href:\"https://a11ysupport.io/tests/html_label_element_implicit#support-summary-by-at-sr\",children:[\"Read more  - Lacking support for \",(0,n.jsx)(e.strong,{children:\"implicit\"}),\" labels\"]}),`\n[^3]: `,(0,n.jsx)(e.a,{href:\"https://html.spec.whatwg.org/multipage/forms.html#category-label\",children:\"Read more - HTML labelable elements\"}),`\n[^4]: `,(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/tutorials/forms/labels/#labeling-buttons\",children:\"Read more - Labeling buttons\"})]})]});return t?(0,n.jsx)(t,Object.assign({},a,{children:l})):l}var f=g;return v;})();\n;return Component.default;","canonicalUrl":"https://beingfrankly.nl/blog/what-why-and-how-on-labels"},"__N_SSG":true}